#!/bin/bash
# -*- coding: utf-8 -*-

PERSIST=${PERSIST-/pst}
TARGET=${TARGET-/opt}
CONCURRENCY=${CONCURRENCY-$(nproc)}
NAME_L=${NAME_L-kernel}
MAJOR=${MAJOR-4.x}
DATE=${DATE-$(date +%Y%m%d)}
SAFE=${SAFE-0}
BUILD=${BUILD-1}
DEPLOY=${DEPLOY-0}

set -e +h

# verifies if the base configuration file exists an in
# in case it does imports it so that the proper configuration
# values are exported into the current execution context
if [ -e /config ]; then
    source /config
fi

# defines the proper (target) architecture for the building process
# taking into account the requested one, then the configured on and
# if all is not defined the pre-defined one (intel)
KARCH=${KARCH-${SCUDUM_BARCH-x86}}
KTARGET=${KTARGET-}

# verifies if the major version value is not properly defined and if
# that's the case unset it (to use the default value)
if [ "$MAJOR" == "" ]; then
    unset MAJOR
fi

# verifies if the minor version value is not properly defined and if
# that's the case unset it (to use the default value)
if [ "$MINOR" == "" ]; then
    unset MINOR
fi

# switches over the selected/current scudum process architecture
# so that the proper conditions are defined for target machines
case "$KARCH" in
    arm*)
        VARIANT=${VARIANT-${1-rasp}}
        MINOR=${MINOR-4.1}
        CFLAGS="$CFLAGS -mfloat-abi=soft"
        ;;
    *)
        VARIANT=${VARIANT-${1-basic}}
        MINOR=${MINOR-4.13.5}
        ;;
esac

# updates the various global variables that are going to be
# used in the construction so that they represent the proper
# values according to the target architecture
VERSION=${VERSION-$MINOR-$DATE}
FILE=${FILE-$NAME_L-$VARIANT-$VERSION}
FILE_CONFIG=${FILE_CONFIG-$FILE.config}
FILE_MODULES=${FILE_MODULES-$FILE.modules.tar.gz}
FILE_SOURCE=${FILE_SOURCE-$FILE.source.tar.gz}
FILE_INFO=${FILE_INFO-$FILE.info.sh}
REPO=${REPO-/mnt/builds/$NAME_L}
CONFIG=${CONFIG-$PREFIX/system/boot/config.$VARIANT}
FALLBACK=${FALLBACK-/boot/config.$VARIANT}

# updates the latest values, resulting from the constuction of
# the previous naming, as expected by the defined rules
LATEST=$NAME_L-$VARIANT-latest
LATEST_CONFIG=$LATEST.config
LATEST_MODULES=$LATEST.modules.tar.gz
LATEST_SOURCE=$LATEST.source.tar.gz
LATEST_INFO=$LATEST.info.sh

# tries to detect the proper configuration file path by
# verifying the existence of the config path, this strategy
# allows for the usage of both paths for configuration
if [ ! -e $CONFIG ]; then
    CONFIG=$FALLBACK
fi

# detects if the proper path where the kernel sources will
# be installed by checking if a persistence path exists
if mountpoint -q $PERSIST; then
    BUILDER=$PERSIST/ksources
else
    BUILDER=$TARGET/ksources
fi

# switches on the target architecture so that if a scpecial
# architecture is used the name of the kernel is changed
case "$KARCH" in
    arm*)
        NAME=${NAME-linux-rasp-$MINOR}
        ;;
    *)
        NAME=${NAME-linux-$MINOR}
        ;;
esac

# ensures that the proper (kernel) builder directory exists
# and changes the current directory into it for usage
mkdir -p $BUILDER && cd $BUILDER

if [ ! -d "$NAME" ]; then
    case "$KARCH" in
        arm*)
            rm -rf $NAME && git clone -b rpi-$MINOR.y --depth 1 https://github.com/raspberrypi/linux.git $NAME
            ;;
        *)
            rm -f $NAME.tar.xz && wget https://www.kernel.org/pub/linux/kernel/v$MAJOR/$NAME.tar.xz
            rm -rf $NAME && tar -xvf $NAME.tar.xz
            rm -f $NAME.tar.xz
            ;;
    esac
else
    echo "kernel.build: skipping $NAME retrieval, already exists ..."
fi

cd $NAME

# in case the safe flag is set the proper cleanup of the
# distribution is performed to avoid collisions/problems
if [ "$SAFE" == "1" ]; then
    make mrproper
fi

cp -v $CONFIG .config  

# in case there's no build flag set (just download) returns
# the control flow immediately (nothing to be done)
if [ "$BUILD" != "1" ]; then
    exit 0
fi

# ensures that the target directories for deployment
# of the modules are removed and then ensucre creation
rm -rf modules_install && mkdir -p modules_install

echo "kernel.build: starting the kernel make process ..."

if [ "$KTARGET" == "" ]; then
    echo "kernel.build: using general/default target for building ..."
    ARCH=$KARCH make $KFLAGS -j $CONCURRENCY
    echo "kernel.build: building modules (modules_install) ..."
    ARCH=$KARCH make modules_install INSTALL_MOD_PATH=modules_install
else
    echo "kernel.build: using '$KTARGET' target for building ..."
    ARCH=$KARCH CROSS_COMPILE=$KTARGET- make -j olddefconfig
    ARCH=$KARCH CROSS_COMPILE=$KTARGET- make -j $CONCURRENCY
    echo "kernel.build: building modules (modules_install) ..."
    ARCH=$KARCH CROSS_COMPILE=$KTARGET- make modules_install INSTALL_MOD_PATH=modules_install
fi

# retrieves the full and canonical name of the current
# kernel release that has been built
release=$(cat include/config/kernel.release)

# changes the current directory to the modules one so that
# it's possible to compress the complete set of modules and
# update some of the directory links to the standard ones
# (eg: modules build pointing to standard kenel source)
pushd modules_install/lib
    rm -f modules/$release/build && rm -f modules/$release/source
    ln -s /opt/src/linux modules/$release/build
    mkdir -p modules firmware
    wget "https://github.com/hivesolutions/patches/raw/master/firmware/firmware.tar.gz"
    tar --skip-old-files -zxvf firmware.tar.gz
    tar -zcvf modules.tar.gz modules firmware
    mv modules.tar.gz ../..
popd
rm -rf modules_install

# verifies if the xz version of the image exists and if that's
# the case renames it to the "old" naming of the same file (gzip)
if [ -e arch/$KARCH/boot/zImage ]; then
    mv arch/$KARCH/boot/zImage arch/$KARCH/boot/bzImage
fi

# creates the version config file that is going to old all of the
# confifuration value for the kernel being built
cat > info.sh << "EOF"
KNAME=$NAME_L
KVERSION=$VERSION
KVARIANT=$VARIANT
KFILE=$FILE
KFILE_MODULES=$FILE_MODULES
KFILE_SOURCE=$FILE_SOURCE
KFILE_INFO=$FILE_INFO
EOF

if [ "$DEPLOY" == "1" ]; then
    echo "kernel.build: deploying '$VARIANT' kernel into $REPO ..."

    # copies the complete set of files that are considere
    # to be part of the base kernel structure into their
    # base file paths and naming (as expected)
    cp -pv arch/$KARCH/boot/bzImage $FILE
    cp -pv .config $FILE_CONFIG
    cp -pv modules.tar.gz $FILE_MODULES
    cp -pv info.sh $FILE_INFO

    # creates the target repository directory (if required)
    # and moves the complete set of files that describe the
    # kernel base structure
    mkdir -pv $REPO
    mv -fv $FILE $REPO
    mv -fv $FILE_CONFIG $REPO
    mv -fv $FILE_MODULES $REPO
    mv -fv $FILE_INFO $REPO

    # runs the cleanup to make the source directory canonical
    # and ready for external module building
    make clean

    # removes the files that are no longer necessary and that
    # are not considered to be part of the source
    rm -fv modules.tar.gz
    rn -fv info.sh

    # creates the the source compressed file that can latter
    # be used for the building of external modules
    pushd ..
        tar -zcvf source.tar.gz $NAME
        mv -fv source.tar.gz $NAME
    popd
    cp -pv source.tar.gz $FILE_SOURCE
    mv -fv $FILE_SOURCE $REPO

    # changes the current directory to the repository one and
    # runs the re-linking of the latest files
    cd $REPO
    rm -fv $LATEST
    rm -fv $LATEST_CONFIG
    rm -fv $LATEST_MODULES
    rm -fv $LATEST_SOURCE
    rm -fv $LATEST_INFO
    ln -sv $FILE $LATEST
    ln -sv $FILE_CONFIG $LATEST_CONFIG
    ln -sv $FILE_MODULES $LATEST_MODULES
    ln -sv $FILE_SOURCE $LATEST_SOURCE
    ln -sv $FILE_INFO $LATEST_INFO
else
    echo "kernel.build: installing '$VARIANT' kernel into the system ..."

    cp -v arch/$KARCH/boot/bzImage /boot/vmlinuz
    cp -v .config /boot/config

    rm -rf /lib/modules
    tar -zxvf modules.tar.gz -C /lib

    rm -fv modules.tar.gz
    rm -fv info.sh
fi
