#!/bin/bash
# -*- coding: utf-8 -*-

PERSIST=${PERSIST-/pst}
TARGET=${TARGET-/opt}
CONCURRENCY=${CONCURRENCY-$(nproc)}
NAME_L=${NAME_L-kernel}
MAJOR=${MAJOR-3.x}
DATE=${DATE-$(date +%Y%m%d)}
SAFE=${SAFE-0}
BUILD=${BUILD-1}
DEPLOY=${DEPLOY-0}

set -e +h

# verifies if the base configuration file exists an in
# in case it does imports it so that the proper configuration
# values are exported into the current execution context
if [ -e /config ]; then
    source /config
fi

# defines the proper (target) architecture for the building process
# taking into account the requested one, then the configured on and
# if all is not defined the pre-defined one (intel 64 bit)
ARCH=${ARCH-${SCUDUM_ARCH-x86_64}}
TARGET=${TARGET-${ARCH_TARGET-}}

# switches over the selected/current scudum process architecture
# so that the proper conditions are defined for target machines
case "$ARCH" in
    arm)
        VARIANT=${VARIANT-${1-rpi}}
        MINOR=${MINOR-3.18}
        ;;
    *)
        VARIANT=${VARIANT-${1-basic}}
        MINOR=${MINOR-3.19}
        ;;
esac

# updates the various global variables that are going to be
# used in the construction so that they represent the proper
# values according to the target architecture
VERSION=${VERSION-$MINOR-$DATE}
FILE=${FILE-$NAME_L-$VARIANT-$VERSION}
FILE_CONFIG=${FILE_CONFIG-$FILE.config}
FILE_MODULES=${FILE_MODULES-$FILE.modules.tar.gz}
REPO=${REPO-/mnt/builds/$NAME_L}
CONFIG=${CONFIG-$PREFIX/system/boot/config.$VARIANT}
FALLBACK=${FALLBACK-/boot/config.$VARIANT}

# updates the latest values, resulting from the constuction of
# the previous naming, as expected by the defined rules
LATEST=$NAME_L-$VARIANT-latest
LATEST_CONFIG=$LATEST.config
LATEST_MODULES=$LATEST.modules.tar.gz

# tries to detect the proper configuration file path by
# verifying the existence of the config path, this strategy
# allows for the usage of both paths for configuration
if [ ! -e $CONFIG ]; then
    CONFIG=$FALLBACK
fi

# detects if the proper path where the kernel sources will
# be installed by checking if a persistence path exists
if mountpoint -q $PERSIST; then
    BUILDER=$PERSIST/ksources
else
    BUILDER=$TARGET/ksources
fi

case "$ARCH" in
    arm)
        NAME=${NAME-linux-rpi-$MINOR}
        ;;
    *)
        NAME=${NAME-linux-$MINOR}
        ;;
esac

# ensures that the proper (kernel) builder directory exists
# and changes the current directory into it for usage
mkdir -p $BUILDER && cd $BUILDER

if [ ! -d "$NAME" ]; then
    case "$ARCH" in
        arm)
            rm -rf $NAME && git clone --depth 1 https://github.com/raspberrypi/linux.git $NAME
            ;;
        *)
            rm -f $NAME.tar.xz && wget https://www.kernel.org/pub/linux/kernel/v$MAJOR/$NAME.tar.xz
            rm -rf $NAME && tar -xvf $NAME.tar.xz
            rm -f $NAME.tar.xz
            ;;
    esac
else
    echo "kernel.build: skipping $NAME retrieval, already exists ..."
fi

cd $NAME

# in case the safe flag is set the proper cleanup of the
# distribution is performed to avoid collisions/problems
if [ "$SAFE" == "1" ]; then
    make mrproper
fi

cp -v $CONFIG .config

if [ "$BUILD" != "1" ]; then
    exit 0
fi

rm -rf modules_install && mkdir -p modules_install

if [ "$ARCH_TARGET" == "" ]; then
    make -j $CONCURRENCY
    make modules_install INSTALL_MOD_PATH=modules_install
else
    ARCH=$ARCH CROSS_COMPILE=$TARGET- make -j $CONCURRENCY
    ARCH=$ARCH CROSS_COMPILE=$TARGET- make modules_install INSTALL_MOD_PATH=modules_install
fi

release=$(cat include/config/kernel.release)

cd modules_install/lib
rm -f modules/$release/build && rm -f modules/$release/source
ln -s /opt/src/linux modules/$release/build
mkdir -p modules firmware
wget "https://github.com/hivesolutions/patches/raw/master/firmware/firmware.tar.gz"
tar --skip-old-files -zxvf firmware.tar.gz
tar -zcvf modules.tar.gz modules firmware
mv modules.tar.gz ../..
cd ../..

if [ "$DEPLOY" == "1" ]; then
    echo "kernel.build: deploying '$VARIANT' kernel into $REPO ..."

    cp -pv arch/x86/boot/bzImage $FILE
    cp -pv .config $FILE_CONFIG
    cp -pv modules.tar.gz $FILE_MODULES

    mkdir -pv $REPO
    mv -fv $FILE $REPO
    mv -fv $FILE_CONFIG $REPO
    mv -fv $FILE_MODULES $REPO

    cd $REPO
    rm -fv $LATEST
    rm -fv $LATEST_CONFIG
    rm -fv $LATEST_MODULES
    ln -sv $FILE $LATEST
    ln -sv $FILE_CONFIG $LATEST_CONFIG
    ln -sv $FILE_MODULES $LATEST_MODULES
else
    echo "kernel.build: installing '$VARIANT' kernel into the system ..."

    cp -v arch/x86/boot/bzImage /boot/vmlinuz
    cp -v .config /boot/config

    rm -rf /lib/modules
    tar -zxvf modules.tar.gz -C /lib
fi
