#!/bin/sh

# sets the initial values for a series of configurations that
# are going to be used in the boot process
QUIET=0
PERSIST=0
CLEANUP=0
PERFORMANCE=0

# declares the function to be used to echo information
# inside the initrd area, allows easier debug
function echoi() {
    if [ "$QUIET" == "1" ]; then return; fi
    echo "[initrd] $1"
}

# declares the function to be used to warn information
# these messages are considered critical for usage
function warni() {
    echo "[initrd] $1"
}

# updates the current path variabmle so that the proper
# relations are used and the executables found
export PATH=/bin:/usr/bin:/sbin:/usr/sbin

# sets the global constant values that are used to
# control the behavior of the loader, note that these
# values are exported so that they may consitional some
# of the operations latter on the boot process
export USE_RAMFS=0
export USE_SWAP=0
export USE_OVERLAYFS=1

# sets the name to be used in the finding of the device
# that contains the storage of information, note that an
# extra variable is set with the uppercase version
DEVICE=Scudum
DEVICE_U=SCUDUM

# sets the initial values for the various variables
# to be used in the loader
mounted=0

# the mode that is going to be used to mount the origin
# device, this is dependent on the kind of storage engine
# to be used (persistent or transient)
mode=ro

# sets the default root and mount directories for
# which the final pivot operation will be performed,
# may change due to the usage of the overlayfs strategy
rootdir=/ram
mountdir=/ram
storagedir=/ram

# mount the proc filesystem as it's required for
# some of the operations in the linuxrc
mount -t proc none /proc

# iterates over the complete set of arguments in the command
# line string (kernel boot string) to try to find some options
for argument in $(cat /proc/cmdline); do
    case "${argument}" in
        quiet)
            QUIET=1
            ;;

        persist)
            PERSIST=1
            ;;

        cleanup)
            CLEANUP=1
            ;;

        performance)
            PERFORMANCE=1
            ;;
    esac
done

# prints a message marking the start of the linux
# so that the end-user may know that interaction
# is now enable (at least using keyboard)
echoi "Welcome to the Scudum Linux - Copyright Hive Solutions Lda. 2008-2015"

# constructs the proper output string, taking into
# account if the current boot is silent or not
if [ "$QUIET" == "1" ]; then
    output="> /dev/null"
else
    output=""
fi

# creates the directory to be used as the mount point
# for the root file system (will be stored in ram)
mkdir -p ram

# makes the ram file system storage in case the
# current mode is set to ram
if [ "$USE_RAMFS" == "1" ]; then
    dd if=/dev/zero of=/dev/ram1 bs=1k count=262144;
    mke2fs -q /dev/ram1
fi

# mounts the apropriate ram storage according to
# the currently set configuration
if [ "$USE_RAMFS" == "1" ]; then
    mount /dev/ram1 /ram
else
    mount -t tmpfs tmpfs /ram
fi

# tries to determine if the overlay fs infra-structure is
# available under the current kernel implementation, in
# case no support is available the overlay fs mode is disabled
result=$(cat /proc/filesystems | grep overlay)
if [ "$result" == "" ]; then
    USE_OVERLAYFS=0
fi

# in case the overlay fs mode is active must create
# the target (unified) directory and change the target
# root directory to it (prints an info message)
if [ "$USE_OVERLAYFS" == "1" ]; then
    echoi "OverlayFS mode is enabled (read & write)"
    rootdir=/overlay
    mountdir=
    mkdir -p $rootdir
fi

# in case the persist flag is set re-defined the storage
# directory as the origin one, so that the origin device
# is used to store the data in the overlay fs mode
if [ "$PERSIST" == "1" ]; then
    storagedir=$mountdir/origin
    mode=rw
fi

# moves the current directory to the mount (target) one
# and creates the (origin) cdrom mount point, note that
# in case the mount directory is the root one no changing
# of directory occurs as it's not required (creates issues)
if [ "$mountdir" != "" ]; then
    cd $mountdir
fi
mkdir -p origin

# sleeps for a while before trying to find the origin
# device, this gives the kernel some time to mount the
# async block devices (eg: usb, mmc, etc)
sleep 1

# prints a message indicating the operation of finding
# the origin device for loading
echoi "Finding origin device location..."

# iterates over "some time" to try to find the proper
# device for the scudum, in a normal situation this
# operation should succeed
for i in {1..5}; do
    # retreives the name of the device that is named
    # scudum (this is considered) the primary mounting
    # strategy for the scudum origin
    drive=$(blkid | egrep "($DEVICE|$DEVICE_U)" | cut -d : -f 1)
    if [ "$drive" != "" ]; then
        echoi "Origin device located at $drive"
        mount -o $mode -n $drive $mountdir/origin
        mounted=1
        break
    fi
    echoi "Trying again in 3 seconds..."
    sleep 3
done

# uses the current cdrom to mount the origin for
# the system loading, the cdrom is considered the
# first fallback for the process, then after that
# tries to mount all of the scsi discs available
if [ "$mounted" == "0" ]; then
    echoi "Origin device not located using fallback"
    mount -t iso9660 -o ro -n /dev/sr0 $mountdir/origin
    if [ "$?" == "0" ]; then mounted=1; fi
    for drive in /dev/{sdj1,sdi1,sdh1,sdg1,sdf1,sde1,sdd1,sdc1,sdb1,sda1}; do
        if [ "$mounted" == "1" ]; then break; fi
        mount -o $mode -n $drive $mountdir/origin
        if [ "$?" == "0" ]; then mounted=1; fi
    done
fi

# verifies if the origin device mounted has been successful,
# if that's not the case prints a warning message and then
# returns the operation control to the calling process
if [ "$mounted" == "0" ]; then
    warni "Not possible to mount origin device, breaking boot"
    exit 1
fi

# verifies if the squashfs file exists for the current
# ofigin media and in case it does mounts it
if [ -f $mountdir/origin/scudum.sqfs ]; then
    SQUASH=1
    echoi "Mounting squashfs based file (scudum.sqfs) as source"
    mkdir -p source
    mount -o loop -t squashfs $mountdir/origin/scudum.sqfs $mountdir/source
elif [ -f $mountdir/origin/scudum.sqf ]; then
    SQUASH=1
    echoi "Mounting squashfs based file (scudum.sqf) as source"
    mkdir -p source
    mount -o loop -t squashfs $mountdir/origin/scudum.sqf $mountdir/source
else
    SQUASH=0
    echoi "Linking origin as source (plain structure)"
    ln -s origin $mountdir/source
fi

# set up some swap space in case the flag that controls
# its usage is currently set, otherwise ignores it
if [ "$USE_SWAP" == "1" ]; then
    echoi "Creating the swap area (for cache)"
    dd if=/dev/zero of=swapspace bs=1k count=131072
    mkswap swapspace
fi

# in case the overlay fs mode is enabled must mount
# the final overlay file system using the source squash
# file system for read and the ram/persist one for write
if [ "$USE_OVERLAYFS" == "1" ]; then
    # in case the persist mode is enabled and the cleanup flag
    # is also set must remove any previously existing root and
    # work directories, so that we allways start fresh
    if [ "$PERSIST" == "1" ] && [ "$CLEANUP" == "1" ]; then
        rm -rf $storagedir/root $storagedir/work
    fi

    # creates, or re-creates both the root and the work directories
    # and then starts the overlay filesystem process with the base
    # (write only directory) as the source and the created root and
    # working (temporary file storage) directories
    mkdir -p $storagedir/root $storagedir/work
    mount -o lowerdir=/source,upperdir=$storagedir/root,workdir=$storagedir/work -t overlay overlayfs /overlay
fi

# changes the current path to the root of the base/target
# directory to start building the system's structure
cd $rootdir

# creates the various directories for which the special
# file systems will be mounted and mounts them so that
# some special operations are ready to be used/processed
mkdir -p run sys proc
mount -t proc none proc

# verifies if the overlay fs mode is active and if that's not
# the case  starts the process of linking directories between
# the source and the target ram based operative system
if [ "$USE_OVERLAYFS" == "0" ]; then
    # prints a message about the symbolic linking of the various
    # directories as part of the legacy operation
    echoi "Creating symbolic links for static directories"

    # creates the various symbolic links that point the source
    # drive/filesystem to the proper binaries for usage
    ln -s source/bin bin
    ln -s source/sbin sbin
    ln -s source/lib lib
    ln -s source/boot boot
    ln -s source/usr usr
fi

# in case the performance flag is set the proper governor strategy
# is defined in the system filesystem, to control the environment
if [ "$PERFORMANCE" == "1" ]; then
    echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
fi

# creates a symbolic link between the arch dependent directory
# for libraries and the more generic one (legacy compatibility)
ln -s lib lib64

# prints a message about the starting of the creation
# of the various directories in preparation for the pivot
# operation that is going to be performed
echoi "Preparing file systems for pivot"

# finish off setting up, it's going to create the complete
# set of directories used for the system, and then touch
# some of the file as requested
mkdir -p pst opt home disk tmp mnt var
cd var
mkdir -p cache lib local log mail opt run spool tmp\
    lib/misc lib/sshd lib/dhclient 
test "$USE_OVERLAYFS" == "0" && mkdir -p lock
touch run/sshd.pid
cd ..

# displays a message about the unpacking operation of the
# various compressed directories that will be used as root
# and entrypoints for the system's configuration/state
echoi "Unpacking tar.gz files for /root /dev /etc to $rootdir"

# these are the only writeable directories
# and are pre-populates with he data contained
# in the provided compressed files
tar -zxf $mountdir/source/images/root.tar.gz $output
tar -zxf $mountdir/source/images/dev.tar.gz $output
tar -zxf $mountdir/source/images/etc.tar.gz $output

# verifies that the overlay fs feature is active and
# touches the proper configuration file so that latter
# on the boot process some actions may be taken
test "$USE_OVERLAYFS" == "1" && touch etc/scudum/OVERLAYFS

# creates the (fallback) directory to hold the reference
# to the original initrd directory (after pivot)
mkdir -p initrd

# runs the pivot operation setting the current directory
# as the root for execution (the root directory becomes the root)
pivot_root . initrd

# changes to new root and swap to new root's devices
# this should trigger the inital system loading (init)
exec /usr/sbin/chroot . /sbin/init < dev/console > dev/console 2>&1

# it should never reach this place as reaching it means
# that a problem occurend in the execution of the chroot
# operation that marks the beginning of the execution
exit
