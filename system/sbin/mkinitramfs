#!/bin/bash

copy() {
    local file

    if [ "$2" == "lib" ]; then
        file=$(PATH=/lib:/usr/lib type -p $1)
    else
        file=$(type -p $1)
    fi

    if [ -n $file ] ; then
        cp $file $TEMP_DIR/$2
    else
        echo "Missing required file: $1 for directory $2"
        rm -rf $TEMP_DIR
        exit 1
    fi
}

if [ -z $1 ] ; then
    INITRAMFS_FILE=initrd.img
else
    KERNEL_VERSION=$1
    INITRAMFS_FILE=initrd.img
fi

if [ -n "$KERNEL_VERSION" ] && [ ! -d "/lib/modules/$1" ] ; then
    echo "No modules directory named $1"
    exit 1
fi

printf "Creating $INITRAMFS_FILE... "

binfiles="sh cat cp dd killall ls mkdir mknod mount "
binfiles="$binfiles umount sed sleep ln rm uname"

# systemd installs udevadm in /bin. Other udev implementations
# have it in /sbin, take note of possible problems/issues
if [ -x /bin/udevadm ] ; then binfiles="$binfiles udevadm"; fi

sbinfiles="modprobe blkid switch_root pivot_root"

# optional files and locations
for f in mdadm udevd udevadm; do
    if [ -x /sbin/$f ] ; then sbinfiles="$sbinfiles $f"; fi
done

unsorted=$(mktemp /tmp/unsorted.XXXXXXXXXX)

DATADIR=/usr/share/mkinitramfs
INIT_IN=linuxrc

# creates a temporrary working directory, where the
# files will be stored for the creation of the image
TEMP_DIR=$(mktemp -d /tmp/initrd-work.XXXXXXXXXX)

# creates the ramdisk file and zeros it taking into
# account the requested size (this is very important)
rm -f ramdisk
dd if=/dev/zero of=ramdisk bs=1k count=32768
losetup /dev/loop1 ramdisk

# creates the the ext2 based file system in the loop
# device and then mounts it under the temporary directory
mke2fs /dev/loop1
mkdir -p /mnt/loop1
mount /dev/loop1 $TEMP_DIR
rm -rf $TEMP_DIR/lost+found

# creates base directory structure
mkdir -p $TEMP_DIR/{bin,dev,lib/firmware,run,sbin,sys,proc}
mkdir -p $TEMP_DIR/etc/{modprobe.d,udev/rules.d}
touch $TEMP_DIR/etc/modprobe.d/modprobe.conf
ln -s lib $TEMP_DIR/lib64

# creates necessary device nodes
mknod -m 640 $TEMP_DIR/dev/console c 5 1
mknod -m 664 $TEMP_DIR/dev/null    c 1 3

# installs the udev configuration files
if [ -f /etc/udev/udev.conf ]; then
    cp /etc/udev/udev.conf $TEMP_DIR/etc/udev/udev.conf
fi

for file in $(find /etc/udev/rules.d/ -type f) ; do
    cp $file $TEMP_DIR/etc/udev/rules.d
done

# installs any firmware present
cp -a /lib/firmware $TEMP_DIR/lib

# copies the RAID configuration file if present
if [ -f /etc/mdadm.conf ] ; then
    cp /etc/mdadm.conf $TEMP_DIR/etc
fi

# installs the init file that will be used for the initial
# loading stage of the linux kernel
install -m0755 $DATADIR/$INIT_IN $TEMP_DIR/linuxrc

if [  -n "$KERNEL_VERSION" ] ; then
    if [ -x /bin/kmod ] ; then
        binfiles="$binfiles kmod"
    else
        binfiles="$binfiles lsmod"
        sbinfiles="$sbinfiles insmod"
    fi
fi

# installs basic binaries
for f in $binfiles ; do
    ldd /bin/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
    copy $f bin
done

# adds lvm if present
if [ -x /sbin/lvm ] ; then sbinfiles="$sbinfiles lvm dmsetup"; fi

for f in $sbinfiles ; do
    ldd /sbin/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
    copy $f sbin
done

# adds udevd libraries if not in /sbin
if [ -x /lib/udev/udevd ] ; then
    ldd /lib/udev/udevd | sed "s/\t//" | cut -d " " -f1 >> $unsorted
elif [ -x /lib/systemd/systemd-udevd ] ; then
    ldd /lib/systemd/systemd-udevd | sed "s/\t//" | cut -d " " -f1 >> $unsorted
fi

# adds module symlinks if appropriate
if [ -n "$KERNEL_VERSION" ] && [ -x /bin/kmod ] ; then
    ln -s kmod $TEMP_DIR/bin/lsmod
    ln -s kmod $TEMP_DIR/bin/insmod
fi

# adds lvm symlinks if appropriate, also copies
# the lvm.conf file
if  [ -x /sbin/lvm ] ; then
    ln -s lvm $TEMP_DIR/sbin/lvchange
    ln -s lvm $TEMP_DIR/sbin/lvrename
    ln -s lvm $TEMP_DIR/sbin/lvextend
    ln -s lvm $TEMP_DIR/sbin/lvcreate
    ln -s lvm $TEMP_DIR/sbin/lvdisplay
    ln -s lvm $TEMP_DIR/sbin/lvscan

    ln -s lvm $TEMP_DIR/sbin/pvchange
    ln -s lvm $TEMP_DIR/sbin/pvck
    ln -s lvm $TEMP_DIR/sbin/pvcreate
    ln -s lvm $TEMP_DIR/sbin/pvdisplay
    ln -s lvm $TEMP_DIR/sbin/pvscan

    ln -s lvm $TEMP_DIR/sbin/vgchange
    ln -s lvm $TEMP_DIR/sbin/vgcreate
    ln -s lvm $TEMP_DIR/sbin/vgscan
    ln -s lvm $TEMP_DIR/sbin/vgrename
    ln -s lvm $TEMP_DIR/sbin/vgck

    cp -a /etc/lvm $TEMP_DIR/etc
fi

# installs libraries into the proper directory
# so that they may be used at runtime
sort $unsorted | uniq | while read library ; do
    if [ "$library" == "linux-vdso.so.1" ] ||
        [ "$library" == "linux-gate.so.1" ]; then
        continue
    fi

    copy $library lib
done

if [ -d /lib/udev ]; then
    cp -a /lib/udev $TEMP_DIR/lib
fi
if [ -d /lib/systemd ]; then
    cp -a /lib/systemd $TEMP_DIR/lib
fi

# installs the kernel modules if they were requested
# these may be used at initram time so that extra dev
# functionality is enabled and may be used
if [ -n "$KERNEL_VERSION" ]; then

    cp /lib/modules/$KERNEL_VERSION/modules.{builtin,order}\
        $TEMP_DIR/lib/modules/$KERNEL_VERSION

    depmod -b $TEMP_DIR $KERNEL_VERSION
fi

# syncs the current filesystem and the unmounts
# it removing then the directory reference
sync
umount $TEMP_DIR
losetup -d /dev/loop1
rm -rf $TEMP_DIR

# runs the compression of the ramdisk into the init
# rma file and then removes the ramdisk file (as it
# is no longer required for the operation)
gzip -9 -c ramdisk > $INITRAMFS_FILE
rm -rf ramdisk

# copies the initramfs file to the various repositories
# of information that are valid for booting, and then removes
# the original file as it's not longer required
cp $INITRAMFS_FILE /isolinux/$INITRAMFS_FILE
cp $INITRAMFS_FILE /boot/$INITRAMFS_FILE
rm -f $INITRAMFS_FILE

# remove the temporary directory and file (no longer required)
# and prints a message about the end of the operation
rm -rf $TEMP_DIR $unsorted
printf "done.\n"
