#!/bin/sh

up() {
    if ip link show $1 > /dev/null 2>&1; then
        link_status=`ip link show $1`

        if [ -n "${link_status}" ]; then
            if ! echo "${link_status}" | grep -q UP; then
                ip link set $1 up
            fi
        fi

    else
        log_failure_msg "\nInterface ${IFACE} doesn't exist."
        exit 1
    fi
}

RELEASE="1.0"

USAGE="Usage: $0 [ -hV ] [--help] [--version] interface"
VERSTR="Scudum ifup, version ${RELEASE}"

while [ $# -gt 0 ]; do
    case "$1" in
        --help | -h)     help="y"; break ;;
        --version | -V)  echo "${VERSTR}"; exit 0 ;;
        -*)              echo "ifup: ${1}: invalid option" >&2
                         echo "${USAGE}" >& 2
                         exit 2 ;;
        *)               break ;;
    esac
done

if [ -n "$help" ]; then
    echo "${VERSTR}"
    echo "${USAGE}"
    echo
    cat << HERE_EOF
ifup is used to bring up a network interface.  The interface
parameter, e.g. eth0 or eth0:2, must match the trailing part of the
interface specifications file, e.g. /etc/sysconfig/ifconfig.eth0:2.

HERE_EOF
   exit 0
fi

file=/etc/sysconfig/ifconfig.${1}

# skips backup files
[ "${file}" = "${file%""~""}" ] || exit 0

. /lib/lsb/init-functions

log_info_msg "Bringing up the ${1} interface... "

if [ ! -r "${file}" ]; then
    log_failure_msg2 "${file} is missing or cannot be accessed." 
    exit 1
fi

. $file

if [ "$IFACE" = "" ]; then
    log_failure_msg2 "${file} does not define an interface [IFACE]."
    exit 1
fi

# does not process this service if started by boot, and onboot
# is not set to yes (skips the operation)
if [ "${IN_BOOT}" = "1" -a "${ONBOOT}" != "yes" ]; then
    log_info_msg2 "skipped"
    exit 0
fi

for S in ${SERVICE}; do
    if [ ! -x "/lib/services/${S}" ]; then
        MSG="\nUnable to process ${file}.  Either " 
        MSG="${MSG}the SERVICE '${S} was not present "
        MSG="${MSG}or cannot be executed."
        log_failure_msg "$MSG"
        exit 1
    fi
done

# iterates over each of the services to try to configure
# the interface using each of the strategies, first pass
for S in ${SERVICE}; do 
    IFCONFIG=${file} /lib/services/${S} ${IFACE} up
done

# brings up the interface and any associated components
# from this moment the interface is considered to be ready
for I in $IFACE $INTERFACE_COMPONENTS; do up $I; done

# sets MTU if requested, checks if MTU has a "good" value
if test -n "${MTU}"; then
    if [[ ${MTU} =~ ^[0-9]+$ ]] && [[ $MTU -ge 68 ]] ; then
        for I in $IFACE $INTERFACE_COMPONENTS; do 
            ip link set dev $I mtu $MTU; 
        done
    else
        log_info_msg2 "Invalid MTU $MTU"
    fi
fi

# sets the route default gateway if requested
if [ -n "${GATEWAY}" ]; then
    if ip route | grep -q default; then
        log_warning_msg "\nGateway already setup; skipping."
    else
        log_info_msg "Setting up default gateway..."
        ip route add default via ${GATEWAY} dev ${IFACE}
        evaluate_retval
    fi
fi
