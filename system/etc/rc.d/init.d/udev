#!/bin/sh

### BEGIN INIT INFO
# Provides:            udev $time
# Required-Start:
# Should-Start:        modules
# Required-Stop:
# Should-Stop:
# Default-Start:       S
# Default-Stop:
# Short-Description:   Populates /dev with device nodes.
# Description:         Mounts a tempfs on /dev and starts the udevd daemon.
#                      Device nodes are created as defined by udev.
### END INIT INFO

. /lib/lsb/init-functions

case "${1}" in
    start)
        log_info_msg "Populating /dev with device nodes... "
        if ! grep -q '[[:space:]]sysfs' /proc/mounts; then
            log_failure_msg2
            msg="FAILURE:\n\nUnable to create "
            msg="${msg}devices without a SysFS filesystem\n\n"
            msg="${msg}After you press Enter, this system "
            msg="${msg}will be halted and powered off.\n\n"
            log_info_msg "$msg"
            log_info_msg "Press Enter to continue..."
            wait_for_user
            /etc/rc.d/init.d/halt stop
        fi

        # udev handles uevents itself, so we don't need to have
        # the kernel call out to any binary in response to them
        echo > /proc/sys/kernel/hotplug

        # starts the udev daemon to continually watch for, and act on,
        # uevents, this should populate and load many device drivers
        /lib/udev/udevd --daemon

        # traverses /sys in order to "coldplug" devices that have
        # already been discovered
        /sbin/udevadm trigger --action=add --type=subsystems
        /sbin/udevadm trigger --action=add --type=devices
        /sbin/udevadm trigger --action=change --type=devices

        # waits for udevd to process the uevents we triggered, this
        # is a blocking call that may take some time to "respond"
        if ! is_true "$OMIT_UDEV_SETTLE"; then
            /sbin/udevadm settle
        fi

        # if any lvm based partitions are on the system, ensures they
        # are activated so they can be used
        if [ -x /sbin/vgchange ]; then /sbin/vgchange -a y > /dev/null; fi 

        log_success_msg2 
        ;;

    *)
        echo "Usage ${0} {start}"
        exit 1
        ;;
esac

exit 0
