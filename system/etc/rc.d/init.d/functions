#!/bin/sh

umask 022
export PATH="/bin:/usr/bin:/sbin:/usr/sbin"

RELOADSIG="HUP"
KILLDELAY="3"

if [ -z "${COLUMNS}" ]; then
    COLUMNS=$(stty size)
    COLUMNS=${COLUMNS##* }
fi

if [ "${COLUMNS}" = "0" ]; then 
    COLUMNS=80
fi

COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))

case "`echo -e -n test`" in
    -[en]*)
        ECHO=/bin/echo
        ;;
    *)
        ECHO=echo
        ;;
esac

SET_COL="\\033[${COL}G"
SET_WCOL="\\033[${WCOL}G"
CURS_UP="\\033[1A\\033[0G"

NORMAL="\\033[0;39m"
SUCCESS="\\033[1;32m"
WARNING="\\033[1;33m"
FAILURE="\\033[1;31m"
INFO="\\033[1;36m"
BRACKET="\\033[1;34m"

STRING_LENGTH="0"

boot_mesg() {
    local ECHOPARM=""

    while true; do
        case "${1}" in
            -n)
                ECHOPARM=" -n "
                shift 1
                ;;
            -*)
                echo "Unknown Option: ${1}"
                return 1
                ;;
            *)
                break
                ;;
        esac
    done
   
    STRING_LENGTH=$((${#1} + 1))

    ${ECHO} ${ECHOPARM} -e "${2}${1}"

    [ -d /run/var ] || return
    ${ECHO} ${ECHOPARM} -e "${2}${1}" >> /run/var/bootlog
}

boot_mesg_flush() {
   STRING_LENGTH="0"
}

echo_ok() {
    ${ECHO} -n -e "${CURS_UP}${SET_COL}${BRACKET}[${SUCCESS}  OK  ${BRACKET}]"
    ${ECHO} -e "${NORMAL}"
    boot_mesg_flush

    [ -d /run/var ] || return
    ${ECHO} -e "[ OK ]" >> /run/var/bootlog
}

echo_failure() {
    ${ECHO} -n -e "${CURS_UP}${SET_COL}${BRACKET}[${FAILURE} FAIL ${BRACKET}]"
    ${ECHO} -e "${NORMAL}"
    boot_mesg_flush

    [ -d /run/var ] || return
    ${ECHO} -e "[ FAIL]"  >> /run/var/bootlog
}

echo_warning()
{
    ${ECHO} -n -e "${CURS_UP}${SET_COL}${BRACKET}[${WARNING} WARN ${BRACKET}]"
    ${ECHO} -e "${NORMAL}"
    boot_mesg_flush

    [ -d /run/var ] || return
    ${ECHO} -e "[ WARN ]"  >> /run/var/bootlog
}

echo_skipped() {
    ${ECHO} -n -e "${CURS_UP}${SET_COL}${BRACKET}[${WARNING} SKIP ${BRACKET}]"
    ${ECHO} -e "${NORMAL}"
    boot_mesg_flush

    [ -d /run/var ] || return
    ${ECHO} -e "  [ SKIP ]" >> /run/var/bootlog
}

wait_for_user() {
    [ "${HEADLESS=0}" = "0" ] && read ENTER
}

evaluate_retval() {
    error_value="${?}"

    if [ ${error_value} = 0 ]; then
        echo_ok
    else
        echo_failure
    fi

    return 0
}

print_status() {
    if [ "${#}" = "0" ]; then
        echo "Usage: ${0} {success|warning|failure}"
        return 1
    fi

    case "${1}" in

        success)
            echo_ok
            ;;

        warning)
            case "${2}" in
                running)
                    ${ECHO} -e -n "${CURS_UP}"
                    ${ECHO} -e -n "\\033[${STRING_LENGTH}G   "
                    boot_mesg "Already running." ${WARNING}
                    echo_warning
                    ;;
                not_running)
                    ${ECHO} -e -n "${CURS_UP}"
                    ${ECHO} -e -n "\\033[${STRING_LENGTH}G   "
                    boot_mesg "Not running." ${WARNING}
                    echo_warning
                ;;
                not_available)
                    ${ECHO} -e -n "${CURS_UP}"
                    ${ECHO} -e -n "\\033[${STRING_LENGTH}G   "
                    boot_mesg "Not available." ${WARNING}
                    echo_warning
                    ;;
                *)
                    echo_warning
                    ;;
            esac
            ;;

        failure)
            echo_failure
            ;;

    esac
}

reloadproc() {
    local pidfile=""
    local failure=0

    while true; do
        case "${1}" in
            -p)
                pidfile="${2}"
                shift 2
                ;;
            -*)
                log_failure_msg "Unknown Option: ${1}"
                return 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ "${#}" -lt "1" ]; then
        log_failure_msg "Usage: reloadproc [-p pidfile] pathname"
        return 2
    fi

    if [ -n "${PIDFILE}" ]; then
        pidfile="${PIDFILE}"
    fi

    if [ -z "${pidfile}" ]; then
        pidofproc -s "${1}"
    else
        pidofproc -s -p "${pidfile}" "${1}"
    fi

    if [ "$?" = 1 ]; then
        boot_mesg -n "Removing stale pid file: ${pidfile}. " ${WARNING}
        rm -f "${pidfile}"
    fi

    if [ -n "${pidlist}" ]; then
        for pid in ${pidlist}; do
            kill -"${RELOADSIG}" "${pid}" || failure="1"
        done

       (exit ${failure})
       evaluate_retval
    else
        boot_mesg "Process ${1} not running." ${WARNING}
        echo_warning
    fi
}

statusproc() {
    local pidfile=""
    local base=""
    local ret=""

    while true; do
        case "${1}" in
            -p)
                pidfile="${2}"
                shift 2
                ;;
            -*)
                log_failure_msg "Unknown Option: ${1}"
                return 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ "${#}" != "1" ]; then
        shift 1
        log_failure_msg "Usage: statusproc [-p pidfile] pathname"
        return 2
    fi

   base="${1##*/}"

    if [ -n "${PIDFILE}" ]; then
        pidfile="${PIDFILE}"
    fi

    if [ -z "${pidfile}" ]; then
        pidofproc -s "${1}"
    else
        pidofproc -s -p "${pidfile}" "${1}"
    fi

    ret=$?

    if [ -n "${pidlist}" ]; then
        ${ECHO} -e "${INFO}${base} is running with Process"\
            "ID(s) ${pidlist}.${NORMAL}"
    else
        if [ -n "${base}" -a -e "/var/run/${base}.pid" ]; then
            ${ECHO} -e "${WARNING}${1} is not running but"\
                "/var/run/${base}.pid exists.${NORMAL}"
        else
            if [ -n "${pidfile}" -a -e "${pidfile}" ]; then
                ${ECHO} -e "${WARNING}${1} is not running"\
                    "but ${pidfile} exists.${NORMAL}"
            else
                ${ECHO} -e "${INFO}${1} is not running.${NORMAL}"
            fi
        fi
    fi

    return $ret
}

pidofproc() {
    local pidfile=""
    local lpids=""
    local silent=""
    pidlist=""

    while true; do
        case "${1}" in
            -p)
                pidfile="${2}"
                shift 2
                ;;

            -s)
                silent="1"
                shift 1
                ;;

            -*)
                log_failure_msg "Unknown Option: ${1}"
                return 2
                ;;

            *)
                break
                ;;
        esac
    done

    if [ "${#}" != "1" ]; then
        shift 1
        log_failure_msg "Usage: pidofproc [-s] [-p pidfile] pathname"
        return 2
    fi

    if [ -n "${pidfile}" ]; then
        if [ ! -r "${pidfile}" ]; then
            return 3 # Program is not running
        fi

        lpids=`head -n 1 ${pidfile}`
        for pid in ${lpids}; do
            if [ "${pid}" -ne "$$" -a "${pid}" -ne "${PPID}" ]; then
                kill -0 "${pid}" 2>/dev/null &&
                pidlist="${pidlist} ${pid}"
            fi
         
            if [ "${silent}" != "1" ]; then
                echo "${pidlist}"
            fi

            test -z "${pidlist}" && 
            return 1
        done
    
    else
        pidlist=`pidof -o $$ -o $PPID -x "$1"`
        if [ "${silent}" != "1" ]; then
            echo "${pidlist}"
        fi

        if [ -n "${pidlist}" ]; then
            return 0
        else
            return 3
        fi
    fi

    if [ "$?" != "0" ]; then
        return 3
    fi
}

loadproc() {
    local pidfile=""
    local forcestart=""
    local nicelevel="10"

    if [ -n "${PIDFILE}" ]; then
        pidfile="${PIDFILE}"
    fi

    while true; do
        case "${1}" in
            -f)
                forcestart="1"
                shift 1
                ;;
            -n)
                nicelevel="${2}"
                shift 2
                ;;
            -p)
                pidfile="${2}"
                shift 2
                ;;
            -*)
                log_failure_msg "Unknown Option: ${1}"
                return 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ "${#}" = "0" ]; then
        log_failure_msg "Usage: loadproc [-f] [-n nicelevel] [-p pidfile] pathname [args]"
        return 2
    fi

    if [ -z "${forcestart}" ]; then
        if [ -z "${pidfile}" ]; then
            pidofproc -s "${1}"
        else
            pidofproc -s -p "${pidfile}" "${1}"
        fi

        case "${?}" in
            0)
                log_warning_msg "Unable to continue: ${1} is running"
                return 0
                ;;
            1)
                boot_mesg "Removing stale pid file: ${pidfile}" ${WARNING}
                rm -f "${pidfile}"
                ;;
            3)
                ;;
            *)
                log_failure_msg "Unknown error code from pidofproc: ${?}"
                return 4
                ;;
        esac
    fi

    nice -n "${nicelevel}" "${@}"
    evaluate_retval
    return 0
}

killproc() {
    local pidfile=""
    local killsig=TERM
    pidlist=""

    if [ -n "${PIDFILE}" ]; then
        pidfile="${PIDFILE}"
    fi

    while true; do
        case "${1}" in
            -p)
                pidfile="${2}"
                shift 2
                ;;
            -*)
                log_failure_msg "Unknown Option: ${1}"
                return 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ "${#}" = "2" ]; then
        killsig="${2}"
    elif [ "${#}" != "1" ]; then
        shift 2
        log_failure_msg "Usage: killproc  [-p pidfile] pathname [signal]"
        return 2
     fi

    if [ -z "${pidfile}" ]; then
        pidofproc -s "${1}"
    else
        pidofproc -s -p "${pidfile}" "${1}"
    fi

    if [ "$?" = 1 ]; then
        boot_mesg "Removing stale pid file: ${pidfile}." ${WARNING}
        rm -f "${pidfile}"
    fi

    if [ -n "${pidlist}" ]; then
        for pid in ${pidlist}; do
            kill -${killsig} ${pid} 2>/dev/null

            case "${killsig}" in
                TERM|SIGTERM|KILL|SIGKILL)
                    local dtime="${KILLDELAY}0"
                    while [ "${dtime}" != "0" ]; do
                        kill -0 ${pid} 2>/dev/null || break
                        sleep 0.1
                        dtime=$(( ${dtime} - 1))
                    done
                
                    kill -0 ${pid} 2>/dev/null && kill -KILL ${pid} 2>/dev/null
                    ;;
            esac
        done

        case "${killsig}" in
            TERM|SIGTERM|KILL|SIGKILL)
                if [ -z "${pidfile}" ]; then
                    pidofproc -s "${1}"
                else
                    pidofproc -s -p "${pidfile}" "${1}"
                fi

                if [ "$?" != "0" ]; then
                    if [ -f "${pidfile}" ]; then
                        rm -f "${pidfile}"
                    fi
                    echo_ok
                    return 0
                else
                    echo_failure
                    return 4
                fi
                ;;
            *)
                evaluate_retval
                ;;
        esac
    else
        print_status warning not_running
    fi
}

log_success_msg() {
    ${ECHO} -n -e "${BOOTMESG_PREFIX}${@}"
    ${ECHO} -e "${SET_COL}""${BRACKET}""[""${SUCCESS}""  OK  ""${BRACKET}""]""${NORMAL}"

    [ -d /run/var ] || return 0
    ${ECHO} -n -e "${@}  [ OK ]"  >> /run/var/bootlog
    return 0
}

log_failure_msg() {
    ${ECHO} -n -e "${BOOTMESG_PREFIX}${@}"
    ${ECHO} -e "${SET_COL}""${BRACKET}""[""${FAILURE}"" FAIL ""${BRACKET}""]""${NORMAL}"

    [ -d /run/var ] || return 0
    ${ECHO} -e "${@}  [ FAIL ]" >> /run/var/bootlog
    return 0
}

log_warning_msg() {
    ${ECHO} -n -e "${BOOTMESG_PREFIX}${@}"
    ${ECHO} -e "${SET_COL}""${BRACKET}""[""${WARNING}"" WARN ""${BRACKET}""]""${NORMAL}"

    [ -d /run/var ] || return 0
    ${ECHO} -e "${@}  [ WARN ]" >> /run/var/bootlog
    return 0
}

log_skipped_msg() {
    ${ECHO} -n -e "${BOOTMESG_PREFIX}${@}"
    ${ECHO} -e "${SET_COL}""${BRACKET}""[""${WARNING}"" SKIP ""${BRACKET}""]""${NORMAL}"

    [ -d /run/var ] || return 0
    ${ECHO} -e "${@}  [ SKIP ]" >> /run/var/bootlog
    return 0
}
